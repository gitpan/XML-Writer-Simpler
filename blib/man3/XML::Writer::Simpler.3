.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Writer::Simpler 3"
.TH XML::Writer::Simpler 3 "2013-12-09" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Writer::Simpler \- Perl extension for writing XML data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a convenience module for writing \s-1XML.\s0 It's a subclass of
\&\f(CW\*(C`XML::Writer\*(C'\fR, with a single convenience method so you usually won't have
to deal with remembering to call \f(CW\*(C`startTag()\*(C'\fR, \f(CW\*(C`endTag()\*(C'\fR, and
\&\f(CW\*(C`emptyTag()\*(C'\fR.
.PP
This module is lies somewhere in between XML::Generator and
XML::Writer::Nest. It nests calls like XML::Generator, but allows for
arbitrary subroutine calls as well. It requires fewer braces in general than
XML::Writer::Nest.
.PP
This module is a subclass of XML::Writer, so if you can't do what you want to
with the \f(CW\*(C`tag\*(C'\fR method, you can fall back to the methods native to XML::Writer.
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
\&\f(CW\*(C`new\*(C'\fR
.Sp
.Vb 1
\&    XML::Writer::Simpler\->new(%params);
.Ve
.Sp
Creates the object. Acceptable hash keys for \f(CW%params\fR are the same as those
for XML::Writer. This module assumes everything is \s-1UTF\-8,\s0 so you can
omit that if you like; it will be provided for you.
.IP "\(bu" 4
tag
.Sp
.Vb 1
\&    $xml\->tag($tagName, [ \e@attributes ], $content);
.Ve
.Sp
If \f(CW$content\fR is a plain scalar value, will output the tag with that content.
If no content is provided, will output an empty tag:
.Sp
.Vb 2
\&    $xml\->tag(\*(Aqexample\*(Aq, \*(Aqfoo\*(Aq);    # <example>foo</example>
\&    $xml\->tag(\*(Aqexample\*(Aq);           # <example />
.Ve
.Sp
You may also pass an array ref of key/value pairs that wind up as attributes:
.Sp
.Vb 2
\&    # <example bar="baz">foo</example>
\&    $xml\->tag(\*(Aqexample\*(Aq, [bar => \*(Aqbaz\*(Aq], \*(Aqfoo\*(Aq);
\&
\&    # <example bar="baz" />
\&    $xml\->tag(\*(Aqexample\*(Aq, [bar => \*(Aqbaz\*(Aq]);
.Ve
.Sp
If \f(CW$content\fR is a code ref, this will start the tag, execute the code ref,
then close the tag. This allows arbitrarily deep/complex tag structures.
.Sp
.Vb 5
\&    # <example1><exA>Text 1</exA><exB>Text 2</exB></example1>
\&    $xml\->tag(\*(Aqexample1\*(Aq, sub {
\&        $xml\->tag(\*(AqexA\*(Aq, \*(AqText 1\*(Aq);
\&        $xml\->tag(\*(AqexB\*(Aq, \*(AqText 2\*(Aq);
\&    });
\&
\&    # <example2><a>100</a><b>101</b><c>102</c></example2>
\&    $xml\->(\*(Aqexample2\*(Aq, sub {
\&        for (my $tag = \*(Aqa\*(Aq, my $num = 100; $num < 103; $tag++, $num++) {
\&            $xml\->($tag, $num);
\&        }
\&    });
.Ve
.Sp
These different styles of calling can be combined in a number of ways to
output basically whatever you like.
.Sp
.Vb 2
\&    # <example3 id=\*(Aqex3\*(Aq>text z</example3>
\&    $xml\->tag(\*(Aqexample3\*(Aq, [id => \*(Aqex3\*(Aq], \*(Aqtext z\*(Aq);
\&
\&    # <example4 id="ex4"><exZ>more text</exZ></example4>
\&    $xml\->tag(\*(Aqexample4\*(Aq, [id => \*(Aqex4\*(Aq], sub {
\&        $xml\->tag(\*(AqexZ\*(Aq, \*(Aqmore text\*(Aq);
\&    });
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::Writer
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael McClimon, \f(CW\*(C`<michael at mcclimon.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-xml\-writer\-simple at rt.cpan.org\*(C'\fR, or through
the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=XML\-Writer\-Simpler>. I will
be notified, and then you'll automatically be notified of progress on your
bug as I make changes. See also the Github repository at
<http://github.com/mmcclimon/XML\-Writer\-Simpler>.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc XML::Writer::Simpler
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
Github
.Sp
<http://github.com/mmcclimon/XML\-Writer\-Simpler>.
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=XML\-Writer\-Simpler>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/XML\-Writer\-Simpler>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/XML\-Writer\-Simpler>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/XML\-Writer\-Simpler/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Michael McClimon.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
